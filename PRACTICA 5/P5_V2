import tkinter as tk
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend
import os
import math

class DiffieHellmanGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Diffie-Hellman para tres personas")
        self.curve_params = None
        self.generator_point = None
        self.private_key = None
        self.shared_key = None

        self.generate_keys_button = tk.Button(master, text="Generar Llaves", command=self.generate_keys)
        self.generate_keys_button.pack(padx=10, pady=10)

        self.load_keys_button = tk.Button(master, text="Cargar Llaves de Otro Usuario", command=self.load_keys)
        self.load_keys_button.pack(padx=10, pady=10)

    def generate_keys(self):
        curve = ec.SECP521R1()
        self.private_key = ec.generate_private_key(curve, default_backend())
        self.curve_params = curve
        self.generator_point = self.private_key.public_key()

    def load_keys(self):
        if self.curve_params is None:
            tk.messagebox.showerror("Error", "Primero debes generar tus llaves.")
            return

        # Simulating loading keys from another user
        other_public_key = self.private_key.public_key()
        self.shared_key = self.private_key.exchange(ec.ECDH(), other_public_key)

        # Show shared key
        self.show_shared_key()

    def show_shared_key(self):
        shared_key_window = tk.Toplevel(self.master)
        shared_key_window.title("Clave Compartida")

        shared_key_label = tk.Label(shared_key_window, text=f"Clave Compartida:\n\n{self.shared_key}")
        shared_key_label.pack(padx=10, pady=10)

        # Calculate and show key length
        self.verify_key_length(self.shared_key, shared_key_window)

    def verify_key_length(self, shared_key, window):
        key_length_bits = math.ceil(math.log2(int.from_bytes(shared_key, 'big')))
        verification_label = tk.Label(window, text=f"La longitud de la clave compartida es de aproximadamente {key_length_bits} bits.")
        verification_label.pack(padx=10, pady=10)

def main():
    root = tk.Tk()
    app = DiffieHellmanGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
